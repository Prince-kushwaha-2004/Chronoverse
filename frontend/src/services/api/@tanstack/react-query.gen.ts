// This file is auto-generated by @hey-api/openapi-ts

import { type Options, getOrders, postOrders, patchOrdersById, getProducts, postProducts, deleteProductsById, getProductsById, patchProductsById, postRegister, getLogin, postLogin, postLogout } from '../sdk.gen';
import { queryOptions, type UseMutationOptions, type DefaultError } from '@tanstack/react-query';
import type { GetOrdersData, PostOrdersData, PatchOrdersByIdData, GetProductsData, PostProductsData, DeleteProductsByIdData, DeleteProductsByIdResponse, GetProductsByIdData, PatchProductsByIdData, PostRegisterData, GetLoginData, PostLoginData, PostLoginResponse, PostLogoutData } from '../types.gen';
import type { AxiosError } from 'axios';
import { client as _heyApiClient } from '../client.gen';

export type QueryKey<TOptions extends Options> = [
    Pick<TOptions, 'baseURL' | 'body' | 'headers' | 'path' | 'query'> & {
        _id: string;
        _infinite?: boolean;
    }
];

const createQueryKey = <TOptions extends Options>(id: string, options?: TOptions, infinite?: boolean): [
    QueryKey<TOptions>[0]
] => {
    const params: QueryKey<TOptions>[0] = { _id: id, baseURL: options?.baseURL || (options?.client ?? _heyApiClient).getConfig().baseURL } as QueryKey<TOptions>[0];
    if (infinite) {
        params._infinite = infinite;
    }
    if (options?.body) {
        params.body = options.body;
    }
    if (options?.headers) {
        params.headers = options.headers;
    }
    if (options?.path) {
        params.path = options.path;
    }
    if (options?.query) {
        params.query = options.query;
    }
    return [
        params
    ];
};

export const getOrdersQueryKey = (options?: Options<GetOrdersData>) => createQueryKey('getOrders', options);

/**
 * Get all orders
 */
export const getOrdersOptions = (options?: Options<GetOrdersData>) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await getOrders({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: getOrdersQueryKey(options)
    });
};

export const postOrdersQueryKey = (options: Options<PostOrdersData>) => createQueryKey('postOrders', options);

/**
 * Create a new order
 */
export const postOrdersOptions = (options: Options<PostOrdersData>) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await postOrders({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: postOrdersQueryKey(options)
    });
};

/**
 * Create a new order
 */
export const postOrdersMutation = (options?: Partial<Options<PostOrdersData>>): UseMutationOptions<unknown, AxiosError<DefaultError>, Options<PostOrdersData>> => {
    const mutationOptions: UseMutationOptions<unknown, AxiosError<DefaultError>, Options<PostOrdersData>> = {
        mutationFn: async (localOptions) => {
            const { data } = await postOrders({
                ...options,
                ...localOptions,
                throwOnError: true
            });
            return data;
        }
    };
    return mutationOptions;
};

/**
 * Update an order
 */
export const patchOrdersByIdMutation = (options?: Partial<Options<PatchOrdersByIdData>>): UseMutationOptions<unknown, AxiosError<DefaultError>, Options<PatchOrdersByIdData>> => {
    const mutationOptions: UseMutationOptions<unknown, AxiosError<DefaultError>, Options<PatchOrdersByIdData>> = {
        mutationFn: async (localOptions) => {
            const { data } = await patchOrdersById({
                ...options,
                ...localOptions,
                throwOnError: true
            });
            return data;
        }
    };
    return mutationOptions;
};

export const getProductsQueryKey = (options?: Options<GetProductsData>) => createQueryKey('getProducts', options);

/**
 * Get all active products
 */
export const getProductsOptions = (options?: Options<GetProductsData>) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await getProducts({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: getProductsQueryKey(options)
    });
};

export const postProductsQueryKey = (options: Options<PostProductsData>) => createQueryKey('postProducts', options);

/**
 * Create a new product
 */
export const postProductsOptions = (options: Options<PostProductsData>) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await postProducts({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: postProductsQueryKey(options)
    });
};

/**
 * Create a new product
 */
export const postProductsMutation = (options?: Partial<Options<PostProductsData>>): UseMutationOptions<unknown, AxiosError<DefaultError>, Options<PostProductsData>> => {
    const mutationOptions: UseMutationOptions<unknown, AxiosError<DefaultError>, Options<PostProductsData>> = {
        mutationFn: async (localOptions) => {
            const { data } = await postProducts({
                ...options,
                ...localOptions,
                throwOnError: true
            });
            return data;
        }
    };
    return mutationOptions;
};

/**
 * Delete a product by ID
 */
export const deleteProductsByIdMutation = (options?: Partial<Options<DeleteProductsByIdData>>): UseMutationOptions<DeleteProductsByIdResponse, AxiosError<DefaultError>, Options<DeleteProductsByIdData>> => {
    const mutationOptions: UseMutationOptions<DeleteProductsByIdResponse, AxiosError<DefaultError>, Options<DeleteProductsByIdData>> = {
        mutationFn: async (localOptions) => {
            const { data } = await deleteProductsById({
                ...options,
                ...localOptions,
                throwOnError: true
            });
            return data;
        }
    };
    return mutationOptions;
};

export const getProductsByIdQueryKey = (options: Options<GetProductsByIdData>) => createQueryKey('getProductsById', options);

/**
 * Get a product by ID
 */
export const getProductsByIdOptions = (options: Options<GetProductsByIdData>) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await getProductsById({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: getProductsByIdQueryKey(options)
    });
};

/**
 * Update a product by ID
 */
export const patchProductsByIdMutation = (options?: Partial<Options<PatchProductsByIdData>>): UseMutationOptions<unknown, AxiosError<DefaultError>, Options<PatchProductsByIdData>> => {
    const mutationOptions: UseMutationOptions<unknown, AxiosError<DefaultError>, Options<PatchProductsByIdData>> = {
        mutationFn: async (localOptions) => {
            const { data } = await patchProductsById({
                ...options,
                ...localOptions,
                throwOnError: true
            });
            return data;
        }
    };
    return mutationOptions;
};

export const postRegisterQueryKey = (options: Options<PostRegisterData>) => createQueryKey('postRegister', options);

/**
 * Register a new user
 */
export const postRegisterOptions = (options: Options<PostRegisterData>) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await postRegister({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: postRegisterQueryKey(options)
    });
};

/**
 * Register a new user
 */
export const postRegisterMutation = (options?: Partial<Options<PostRegisterData>>): UseMutationOptions<unknown, AxiosError<DefaultError>, Options<PostRegisterData>> => {
    const mutationOptions: UseMutationOptions<unknown, AxiosError<DefaultError>, Options<PostRegisterData>> = {
        mutationFn: async (localOptions) => {
            const { data } = await postRegister({
                ...options,
                ...localOptions,
                throwOnError: true
            });
            return data;
        }
    };
    return mutationOptions;
};

export const getLoginQueryKey = (options?: Options<GetLoginData>) => createQueryKey('getLogin', options);

/**
 * Check if user is authenticated (requires cookie)
 */
export const getLoginOptions = (options?: Options<GetLoginData>) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await getLogin({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: getLoginQueryKey(options)
    });
};

export const postLoginQueryKey = (options: Options<PostLoginData>) => createQueryKey('postLogin', options);

/**
 * Login user
 */
export const postLoginOptions = (options: Options<PostLoginData>) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await postLogin({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: postLoginQueryKey(options)
    });
};

/**
 * Login user
 */
export const postLoginMutation = (options?: Partial<Options<PostLoginData>>): UseMutationOptions<PostLoginResponse, AxiosError<DefaultError>, Options<PostLoginData>> => {
    const mutationOptions: UseMutationOptions<PostLoginResponse, AxiosError<DefaultError>, Options<PostLoginData>> = {
        mutationFn: async (localOptions) => {
            const { data } = await postLogin({
                ...options,
                ...localOptions,
                throwOnError: true
            });
            return data;
        }
    };
    return mutationOptions;
};

export const postLogoutQueryKey = (options?: Options<PostLogoutData>) => createQueryKey('postLogout', options);

/**
 * Logout user
 */
export const postLogoutOptions = (options?: Options<PostLogoutData>) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await postLogout({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: postLogoutQueryKey(options)
    });
};

/**
 * Logout user
 */
export const postLogoutMutation = (options?: Partial<Options<PostLogoutData>>): UseMutationOptions<unknown, AxiosError<DefaultError>, Options<PostLogoutData>> => {
    const mutationOptions: UseMutationOptions<unknown, AxiosError<DefaultError>, Options<PostLogoutData>> = {
        mutationFn: async (localOptions) => {
            const { data } = await postLogout({
                ...options,
                ...localOptions,
                throwOnError: true
            });
            return data;
        }
    };
    return mutationOptions;
};