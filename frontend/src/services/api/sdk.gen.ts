// This file is auto-generated by @hey-api/openapi-ts

import { type Options as ClientOptions, type TDataShape, type Client, formDataBodySerializer } from './client';
import type { GetOrdersData, GetOrdersResponses, GetOrdersErrors, PostOrdersData, PostOrdersResponses, PostOrdersErrors, PatchOrdersByIdData, PatchOrdersByIdResponses, PatchOrdersByIdErrors, GetProductsData, GetProductsResponses, PostProductsData, PostProductsResponses, PostProductsErrors, DeleteProductsByIdData, DeleteProductsByIdResponses, DeleteProductsByIdErrors, GetProductsByIdData, GetProductsByIdResponses, GetProductsByIdErrors, PatchProductsByIdData, PatchProductsByIdResponses, PatchProductsByIdErrors, PostRegisterData, PostRegisterResponses, PostRegisterErrors, GetLoginData, GetLoginResponses, GetLoginErrors, PostLoginData, PostLoginResponses, PostLoginErrors, PostLogoutData, PostLogoutResponses } from './types.gen';
import { client as _heyApiClient } from './client.gen';

export type Options<TData extends TDataShape = TDataShape, ThrowOnError extends boolean = boolean> = ClientOptions<TData, ThrowOnError> & {
    /**
     * You can provide a client instance returned by `createClient()` instead of
     * individual options. This might be also useful if you want to implement a
     * custom client.
     */
    client?: Client;
    /**
     * You can pass arbitrary values through the `meta` object. This can be
     * used to access values that aren't defined as part of the SDK function.
     */
    meta?: Record<string, unknown>;
};

/**
 * Get all orders
 */
export const getOrders = <ThrowOnError extends boolean = false>(options?: Options<GetOrdersData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<GetOrdersResponses, GetOrdersErrors, ThrowOnError>({
        url: '/orders',
        ...options
    });
};

/**
 * Create a new order
 */
export const postOrders = <ThrowOnError extends boolean = false>(options: Options<PostOrdersData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<PostOrdersResponses, PostOrdersErrors, ThrowOnError>({
        url: '/orders',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

/**
 * Update an order
 */
export const patchOrdersById = <ThrowOnError extends boolean = false>(options: Options<PatchOrdersByIdData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).patch<PatchOrdersByIdResponses, PatchOrdersByIdErrors, ThrowOnError>({
        url: '/orders/{id}',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

/**
 * Get all active products
 */
export const getProducts = <ThrowOnError extends boolean = false>(options?: Options<GetProductsData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<GetProductsResponses, unknown, ThrowOnError>({
        responseType: 'json',
        url: '/products',
        ...options
    });
};

/**
 * Create a new product
 */
export const postProducts = <ThrowOnError extends boolean = false>(options: Options<PostProductsData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<PostProductsResponses, PostProductsErrors, ThrowOnError>({
        ...formDataBodySerializer,
        url: '/products',
        ...options,
        headers: {
            'Content-Type': null,
            ...options.headers
        }
    });
};

/**
 * Delete a product by ID
 */
export const deleteProductsById = <ThrowOnError extends boolean = false>(options: Options<DeleteProductsByIdData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).delete<DeleteProductsByIdResponses, DeleteProductsByIdErrors, ThrowOnError>({
        url: '/products/{id}',
        ...options
    });
};

/**
 * Get a product by ID
 */
export const getProductsById = <ThrowOnError extends boolean = false>(options: Options<GetProductsByIdData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<GetProductsByIdResponses, GetProductsByIdErrors, ThrowOnError>({
        responseType: 'json',
        url: '/products/{id}',
        ...options
    });
};

/**
 * Update a product by ID
 */
export const patchProductsById = <ThrowOnError extends boolean = false>(options: Options<PatchProductsByIdData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).patch<PatchProductsByIdResponses, PatchProductsByIdErrors, ThrowOnError>({
        ...formDataBodySerializer,
        url: '/products/{id}',
        ...options,
        headers: {
            'Content-Type': null,
            ...options.headers
        }
    });
};

/**
 * Register a new user
 */
export const postRegister = <ThrowOnError extends boolean = false>(options: Options<PostRegisterData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<PostRegisterResponses, PostRegisterErrors, ThrowOnError>({
        url: '/register',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

/**
 * Check if user is authenticated (requires cookie)
 */
export const getLogin = <ThrowOnError extends boolean = false>(options?: Options<GetLoginData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<GetLoginResponses, GetLoginErrors, ThrowOnError>({
        responseType: 'json',
        url: '/login',
        ...options
    });
};

/**
 * Login user
 */
export const postLogin = <ThrowOnError extends boolean = false>(options: Options<PostLoginData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<PostLoginResponses, PostLoginErrors, ThrowOnError>({
        responseType: 'json',
        url: '/login',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

/**
 * Logout user
 */
export const postLogout = <ThrowOnError extends boolean = false>(options?: Options<PostLogoutData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).post<PostLogoutResponses, unknown, ThrowOnError>({
        url: '/logout',
        ...options
    });
};