/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

import { Route as rootRouteImport } from './routes/__root'
import { Route as LoginRouteImport } from './routes/login'
import { Route as HomeLayoutRouteImport } from './routes/_homeLayout'
import { Route as AdminRouteRouteImport } from './routes/admin/route'
import { Route as IndexRouteImport } from './routes/index'
import { Route as AdminIndexRouteImport } from './routes/admin/index'
import { Route as HomeLayoutCartsRouteImport } from './routes/_homeLayout.carts'
import { Route as AdminOrdersIndexRouteImport } from './routes/admin/orders/index'
import { Route as HomeLayoutProductsIndexRouteImport } from './routes/_homeLayout.products/index'
import { Route as HomeLayoutProductsProductIdRouteImport } from './routes/_homeLayout.products/$productId'

const LoginRoute = LoginRouteImport.update({
  id: '/login',
  path: '/login',
  getParentRoute: () => rootRouteImport,
} as any)
const HomeLayoutRoute = HomeLayoutRouteImport.update({
  id: '/_homeLayout',
  getParentRoute: () => rootRouteImport,
} as any)
const AdminRouteRoute = AdminRouteRouteImport.update({
  id: '/admin',
  path: '/admin',
  getParentRoute: () => rootRouteImport,
} as any)
const IndexRoute = IndexRouteImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => rootRouteImport,
} as any)
const AdminIndexRoute = AdminIndexRouteImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => AdminRouteRoute,
} as any)
const HomeLayoutCartsRoute = HomeLayoutCartsRouteImport.update({
  id: '/carts',
  path: '/carts',
  getParentRoute: () => HomeLayoutRoute,
} as any)
const AdminOrdersIndexRoute = AdminOrdersIndexRouteImport.update({
  id: '/orders/',
  path: '/orders/',
  getParentRoute: () => AdminRouteRoute,
} as any)
const HomeLayoutProductsIndexRoute = HomeLayoutProductsIndexRouteImport.update({
  id: '/products/',
  path: '/products/',
  getParentRoute: () => HomeLayoutRoute,
} as any)
const HomeLayoutProductsProductIdRoute =
  HomeLayoutProductsProductIdRouteImport.update({
    id: '/products/$productId',
    path: '/products/$productId',
    getParentRoute: () => HomeLayoutRoute,
  } as any)

export interface FileRoutesByFullPath {
  '/': typeof IndexRoute
  '/admin': typeof AdminRouteRouteWithChildren
  '/login': typeof LoginRoute
  '/carts': typeof HomeLayoutCartsRoute
  '/admin/': typeof AdminIndexRoute
  '/products/$productId': typeof HomeLayoutProductsProductIdRoute
  '/products': typeof HomeLayoutProductsIndexRoute
  '/admin/orders': typeof AdminOrdersIndexRoute
}
export interface FileRoutesByTo {
  '/': typeof IndexRoute
  '/login': typeof LoginRoute
  '/carts': typeof HomeLayoutCartsRoute
  '/admin': typeof AdminIndexRoute
  '/products/$productId': typeof HomeLayoutProductsProductIdRoute
  '/products': typeof HomeLayoutProductsIndexRoute
  '/admin/orders': typeof AdminOrdersIndexRoute
}
export interface FileRoutesById {
  __root__: typeof rootRouteImport
  '/': typeof IndexRoute
  '/admin': typeof AdminRouteRouteWithChildren
  '/_homeLayout': typeof HomeLayoutRouteWithChildren
  '/login': typeof LoginRoute
  '/_homeLayout/carts': typeof HomeLayoutCartsRoute
  '/admin/': typeof AdminIndexRoute
  '/_homeLayout/products/$productId': typeof HomeLayoutProductsProductIdRoute
  '/_homeLayout/products/': typeof HomeLayoutProductsIndexRoute
  '/admin/orders/': typeof AdminOrdersIndexRoute
}
export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths:
    | '/'
    | '/admin'
    | '/login'
    | '/carts'
    | '/admin/'
    | '/products/$productId'
    | '/products'
    | '/admin/orders'
  fileRoutesByTo: FileRoutesByTo
  to:
    | '/'
    | '/login'
    | '/carts'
    | '/admin'
    | '/products/$productId'
    | '/products'
    | '/admin/orders'
  id:
    | '__root__'
    | '/'
    | '/admin'
    | '/_homeLayout'
    | '/login'
    | '/_homeLayout/carts'
    | '/admin/'
    | '/_homeLayout/products/$productId'
    | '/_homeLayout/products/'
    | '/admin/orders/'
  fileRoutesById: FileRoutesById
}
export interface RootRouteChildren {
  IndexRoute: typeof IndexRoute
  AdminRouteRoute: typeof AdminRouteRouteWithChildren
  HomeLayoutRoute: typeof HomeLayoutRouteWithChildren
  LoginRoute: typeof LoginRoute
}

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/login': {
      id: '/login'
      path: '/login'
      fullPath: '/login'
      preLoaderRoute: typeof LoginRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/_homeLayout': {
      id: '/_homeLayout'
      path: ''
      fullPath: ''
      preLoaderRoute: typeof HomeLayoutRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/admin': {
      id: '/admin'
      path: '/admin'
      fullPath: '/admin'
      preLoaderRoute: typeof AdminRouteRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/': {
      id: '/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof IndexRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/admin/': {
      id: '/admin/'
      path: '/'
      fullPath: '/admin/'
      preLoaderRoute: typeof AdminIndexRouteImport
      parentRoute: typeof AdminRouteRoute
    }
    '/_homeLayout/carts': {
      id: '/_homeLayout/carts'
      path: '/carts'
      fullPath: '/carts'
      preLoaderRoute: typeof HomeLayoutCartsRouteImport
      parentRoute: typeof HomeLayoutRoute
    }
    '/admin/orders/': {
      id: '/admin/orders/'
      path: '/orders'
      fullPath: '/admin/orders'
      preLoaderRoute: typeof AdminOrdersIndexRouteImport
      parentRoute: typeof AdminRouteRoute
    }
    '/_homeLayout/products/': {
      id: '/_homeLayout/products/'
      path: '/products'
      fullPath: '/products'
      preLoaderRoute: typeof HomeLayoutProductsIndexRouteImport
      parentRoute: typeof HomeLayoutRoute
    }
    '/_homeLayout/products/$productId': {
      id: '/_homeLayout/products/$productId'
      path: '/products/$productId'
      fullPath: '/products/$productId'
      preLoaderRoute: typeof HomeLayoutProductsProductIdRouteImport
      parentRoute: typeof HomeLayoutRoute
    }
  }
}

interface AdminRouteRouteChildren {
  AdminIndexRoute: typeof AdminIndexRoute
  AdminOrdersIndexRoute: typeof AdminOrdersIndexRoute
}

const AdminRouteRouteChildren: AdminRouteRouteChildren = {
  AdminIndexRoute: AdminIndexRoute,
  AdminOrdersIndexRoute: AdminOrdersIndexRoute,
}

const AdminRouteRouteWithChildren = AdminRouteRoute._addFileChildren(
  AdminRouteRouteChildren,
)

interface HomeLayoutRouteChildren {
  HomeLayoutCartsRoute: typeof HomeLayoutCartsRoute
  HomeLayoutProductsProductIdRoute: typeof HomeLayoutProductsProductIdRoute
  HomeLayoutProductsIndexRoute: typeof HomeLayoutProductsIndexRoute
}

const HomeLayoutRouteChildren: HomeLayoutRouteChildren = {
  HomeLayoutCartsRoute: HomeLayoutCartsRoute,
  HomeLayoutProductsProductIdRoute: HomeLayoutProductsProductIdRoute,
  HomeLayoutProductsIndexRoute: HomeLayoutProductsIndexRoute,
}

const HomeLayoutRouteWithChildren = HomeLayoutRoute._addFileChildren(
  HomeLayoutRouteChildren,
)

const rootRouteChildren: RootRouteChildren = {
  IndexRoute: IndexRoute,
  AdminRouteRoute: AdminRouteRouteWithChildren,
  HomeLayoutRoute: HomeLayoutRouteWithChildren,
  LoginRoute: LoginRoute,
}
export const routeTree = rootRouteImport
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()
